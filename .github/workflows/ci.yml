name: Meshery Istio
on:
  push:
    branches:
      - "*"
    tags:
      - "v*"
  pull_request:
    branches:
      - master
jobs:
  lint:
    name: Check & Review code
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@master
        with:
          fetch-depth: 1
      - name: Setup Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ secrets.GO_VERSION }}
      - run: GOPROXY=direct GOSUMDB=off go get -u golang.org/x/lint/golint; go list ./istio/... | grep -v /vendor/ | xargs -L1 /home/runner/go/bin/golint -set_exit_status
  error_check:
    name: Error check
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@master
        with:
          fetch-depth: 1
      - name: Setup Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ secrets.GO_VERSION }}
      - run: GOPROXY=direct GOSUMDB=off GO111MODULE=on go get -u github.com/kisielk/errcheck; /home/runner/go/bin/errcheck -tags draft ./...
  static_check:
    name: Static check
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@master
        with:
          fetch-depth: 1
      - name: Setup Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ secrets.GO_VERSION }}
      - run: GOPROXY=direct GOSUMDB=off GO111MODULE=on go get -u honnef.co/go/tools/cmd/staticcheck; /home/runner/go/bin/staticcheck -tags draft -checks all ./istio/... # https://staticcheck.io/docs/checks
  vet:
    name: Vet
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@master
        with:
          fetch-depth: 1
      - name: Setup Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ secrets.GO_VERSION }}
      - run: GOPROXY=direct GOSUMDB=off GO111MODULE=on go vet -tags draft ./...
  sec_check:
    name: Security check
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: ./...
  tests:
    #  needs: [lint, error_check, static_check, vet, sec_check]
     name: Tests
     runs-on: ubuntu-latest
     steps:
     - name: Check out code
       uses: actions/checkout@master
       with:
        fetch-depth: 1
     - name: Setup Go
       uses: actions/setup-go@v1
       with:
        go-version: ${{ secrets.GO_VERSION }}
     - name: Create cluster using KinD
       uses: engineerd/setup-kind@v0.3.0
       with:
         version: "v0.7.0"
     - run: |
         export CURRENTCONTEXT="$(kubectl config current-context)"
         echo "current-context:" ${CURRENTCONTEXT}   
         export KUBECONFIG="${HOME}/.kube/config"
         echo "environment-kubeconfig:" ${KUBECONFIG}
         GOPROXY=direct GOSUMDB=off GO111MODULE=on go test ./...
  build:
    name: Build check
    runs-on: ubuntu-latest
    # needs: [lint, error_check, static_check, vet, sec_check, tests]
    steps:
      - name: Check out code
        uses: actions/checkout@master
        with:
          fetch-depth: 1
      - name: Setup Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ secrets.GO_VERSION }}
      - run: GOPROXY=direct GOSUMDB=off GO111MODULE=on go build .
  docker:
    name: Docker build and push
    runs-on: ubuntu-latest
    # needs: [build, build_release]
    steps:
      - name: Check out code
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
        uses: actions/checkout@master
        with:
          fetch-depth: 1
      - name: Docker build and push
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ secrets.IMAGE_NAME }}
          tags: latest
          tag_with_sha: true
          tag_with_ref: true
      - name: Docker Hub Description
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
        uses: peter-evans/dockerhub-description@v2.0.0
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKERHUB_REPOSITORY: ${{ secrets.IMAGE_NAME }}
